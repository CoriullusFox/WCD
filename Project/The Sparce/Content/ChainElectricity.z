/* ----------------------------------------------------------------------------
** TEAM - We Couldn't Decide
** © 2017 DigiPen Institute of Technology, All Rights Reserved.
**
** FILE NAME
**
** Author:
** - Brandon Wolenetz
**
** Contributors:
** - none
** --------------------------------------------------------------------------*/

class ChainElectricity : ZilchComponent
{
    
    var Cooldown : Real = 0;
    
    [Property]
    var Bullet : Archetype = Archetype.Bullet_Beam;
    
    [Property]
    var Damage : Real = 20;
    
    [Property]
    var EnergyUsePer : Real = 5;
    
    [Property]
    var Energy : Real = 100;
    
    [Property]
    var CooldownMax : Real = 4;
    
    [Property]
    var Player : Boolean = false;
    
    [Property]
    var CamZoom : Real = 18;
    
    [Property]
    var MaxLinks : Integer = 10;
    
    [Property]
    var Radius : Real = 20;
    
    [Property]
    var FreezeTime : Real = 2;
    
    var Links : Array[Cog];
    
    function Initialize(init : CogInitializer)
    {
        this.Links = Array[Cog]();

        Zero.Connect(this.Owner, Events.Shoot, this.OnShoot);
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(this.GameSession, Events.Energy, this.OnEnergy);
    }

    function OnEnergy(event : Energy)
    {
        this.Energy = event.Energy;
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        if (this.Player)
            this.LevelSettings.CameraViewport.Camera.Camera.Size = Math.Lerp(this.LevelSettings.CameraViewport.Camera.Camera.Size, this.CamZoom / 2, event.Dt * 10);
        //Cooldown logic
        this.Cooldown += event.Dt;
        if(this.Player)
        {
            var toSend = Cooldown();
            toSend.Cooldown = this.CooldownMax - this.Cooldown;
            toSend.MaxCooldown = this.CooldownMax;
            this.GameSession.DispatchEvent(Events.Cooldown, toSend);
        }
    }

    function OnShoot(event : Shoot)
    {
        this.Player = event.Player;
        //only shoot if cooldown is over
        if(this.Cooldown >= this.CooldownMax && this.Energy >= this.EnergyUsePer)
        {
            this.Owner.DispatchEvent(Events.Fire, Fire());
            this.Cooldown = 0;
            
            /** SHOOTING LOGIC HERE **/
            
            this.Links.Clear();
            this.Links.Add(this.Owner);
            
            var filter : CastFilter = CastFilter();
            filter.IgnoreStatic = true;
            filter.IgnoreGhost = true;
            filter.IgnoreKinematic = true;
            filter.IgnoreChildren = true;
            filter.IgnoreDynamic = false;
            //get the array of links
            for (var i = 0; i < this.MaxLinks; ++i)
            {
                
                var temp : Cog = null;
                var cast = this.Space.PhysicsSpace.CastSphereResults(this.Links[i].Transform.Translation, this.Radius, this.MaxLinks, filter);
                
                if(this.LevelSettings.DebugMode.DubugModeEnabled)
                {
                    var debugCircle = DebugCircle();
                    debugCircle.Position(this.Links[i].Transform.Translation);
                    debugCircle.Radius(this.Radius);
                    debugCircle.Border(true);
                    debugCircle.Filled(true);
                    debugCircle.Axis(Real3(0,0,1));
                    debugCircle.Duration(1);
                    debugCircle.Draw();
                }
                for (var l = 0; l < cast.Size() /*|| cast.Empty()*/; ++l)
                {
                    
                    if(cast.Current.ObjectHit.Name == "Enemy" && !this.ArrayContains(this.Links, cast.Current.ObjectHit))
                    {
                        Console.WriteLine(temp);
                        if(temp == null || Math.Distance(this.Links[i].Transform.Translation, cast.Current.ObjectHit.Transform.Translation) < Math.Distance(this.Links[i].Transform.Translation, temp.Transform.Translation))
                        {
                            var dir = cast.Current.ObjectHit.Transform.Translation - this.Links[i].Transform.Translation;
                            Math.Normalize(dir);
                            var direction = Real3(dir.X, dir.Y, 0.0);
                            
                            var rayFilter = CastFilter();
                            rayFilter.IgnoreDynamic = true;
                            rayFilter.IgnoreStatic = false;
                            
                            cast.Current.ObjectHit.RigidBody.DynamicState = RigidBodyDynamicState.Static;
                            
                            var ray = Ray();
                            ray.Start = this.Links[i].Transform.Translation;
                            ray.Direction = direction;
                            var rayCast = this.Space.PhysicsSpace.CastRayFirstFiltered(ray, rayFilter);
                            
                            cast.Current.ObjectHit.RigidBody.DynamicState = RigidBodyDynamicState.Dynamic;
                            
                            if(rayCast.ObjectHit == cast.Current.ObjectHit)
                            {
                                temp = cast.Current.ObjectHit;
                            }
                        }
                        
                    }
                    cast.PopFront();
                    
                }
                
                if(temp == null)
                {
                    break;
                }
                
                this.Links.Add(temp);
                
                
            }
            
            //check is found somthin
            if(this.Links.Count != 1)
            {
                this.Owner.Health.Freeze(0, this.FreezeTime);
            }
            else
            {
                this.Cooldown = this.CooldownMax;
                return;
            }
            
            //do damage, freeze, and draw lines\\
            
            //freez and damage
            for (var i = 1; i < this.Links.Count; ++i)
            {
                
                if(this.Owner.EnergyStor.Energy >= this.EnergyUsePer)
                {
                    this.Owner.EnergyStor.Energy -= this.EnergyUsePer;
                    this.Links[i].Health.Freeze(this.Damage, this.FreezeTime);
                }
                else
                {
                    this.Links.RemoveAt(i);
                }
            }
            
            //draw electricity
            for (var i = 0; i < this.Links.Count -1; ++i)
            {
                
                var bullet = this.Space.CreateAtPosition(Archetype.Bullet_Electricity, this.Links[i].Transform.Translation);
                if(bullet != null)
                {
                    
                    bullet.Orientation.LookAtPointWithUp(this.Links[i+1].Transform.Translation, Real3.ZAxis);
                    bullet.Transform.Scale = Real3(1, Math.Distance(this.Links[i].Transform.Translation, this.Links[i+1].Transform.Translation), 1);
                    bullet.Despawn.LifeLength = this.FreezeTime;
                    
                }
                
            }
            
        }
    }
    function ArrayContains(array : Array[Cog], cog : Cog) : Boolean
    {
        
        return array.FindFirstIndex(cog) != -1;
        
    }
}
