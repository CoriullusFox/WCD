/* ----------------------------------------------------------------------------
** TEAM - We Couldn't Decide
** © 2017 DigiPen Institute of Technology, All Rights Reserved.
**
** FILE NAME
**
** Author:
** - Brandon Wolenetz
**
** Contributors:
** - <list in same format as author if applicable>
** --------------------------------------------------------------------------*/

class Minigun : ZilchComponent
{
        var Cooldown : Real = 0;
    var Bullet : Archetype = Archetype.BulletTest;
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Owner, Events.Shoot, this.OnShoot);
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        //Cooldown logic
        this.Cooldown += event.Dt;
    }
    
    //Shooting logic (only runs when the event is called)
    function OnShoot(event : Shoot)
    {
        //only shoot if cooldown is over
        if(this.Cooldown >= 0.01)
        {
            this.Cooldown = 0;
            /** SHOOTING LOGIC HERE **/
            
            if(this.Bullet != null)
            {
                var createdBullet = this.Space.CreateAtPosition(this.Bullet, this.Owner.Transform.Translation);
                
                if(createdBullet != null)
                {
                    var randGen : Random = Random();
                    //angle of rotation
                    var angle = Math.Angle2D(event.Direction) + randGen.Range(0.1, 0.1*-1);
                    
                    //generate direction for orientation component from angle
                    var newDirection = Real3(Math.Cos(angle), Math.Sin(angle), 0);
                    
                    //apply direction and movement
                    createdBullet.Orientation.LookAtDirection(newDirection);
                    createdBullet.RigidBody.Velocity = Math.Normalize(newDirection) * 45;
                    
                    createdBullet.Despawn.LifeLength = 0.5;
                    
                }
            }
        }
    
    }
}
