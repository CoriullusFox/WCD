/* ----------------------------------------------------------------------------
** TEAM - We Couldn't Decide
** © 2017 DigiPen Institute of Technology, All Rights Reserved.
**
** FILE NAME
**
** Author:
** - Brandon Wolenetz
**
** Contributors:
** - <list in same format as author if applicable>
** --------------------------------------------------------------------------*/

class Shooting : ZilchComponent
{
    //shootes bullets based on input
    function Shoot (bullet: Archetype, spredShot: Boolean, numberOfSpread: Integer, distanceBetweenSpreadshots: Real, direction: Real3, position: Real3, speed: Real, lifeLength : Real, randomVary : Real)
    {
        //non spreadshot
        if(!spredShot)
        {
            var createdBullet = this.Space.CreateAtPosition(bullet, position);
            if(createdBullet != null)
            {
                var randGen : Random = Random();
                    //angle of rotation
                    var angle = Math.Angle2D(direction) + randGen.Range(randomVary, randomVary*-1);
                    
                    //generate direction for orientation component from angle
                    var newDirection = Real3(Math.Cos(angle), Math.Sin(angle), 0);
                    
                    //apply direction and movement
                    createdBullet.Orientation.LookAtDirection(newDirection);
                    createdBullet.RigidBody.Velocity = Math.Normalize(newDirection) * speed;
                    
                    createdBullet.Despawn.LifeLength = lifeLength;
                
            }
        }
        //spreadshot
        else
        {
            
            for(var i = numberOfSpread; i > 0; i -= 1)
            {
                
                
                var createdBullet = this.Space.CreateAtPosition(bullet, position);
                if(createdBullet != null)
                {
                    var randGen : Random = Random();
                    //angle of rotation
                    var angle = (Math.Angle2D(direction) + (i * distanceBetweenSpreadshots) - (distanceBetweenSpreadshots * numberOfSpread)/2) + randGen.Range(randomVary, randomVary*-1);
                    
                    //generate direction for orientation component from angle
                    var newDirection = Real3(Math.Cos(angle), Math.Sin(angle), 0);
                    
                    //apply direction and movement
                    createdBullet.Orientation.LookAtDirection(newDirection);
                    createdBullet.RigidBody.Velocity = Math.Normalize(newDirection) * speed;
                    
                    createdBullet.Despawn.LifeLength = lifeLength;
                    
                }
            }
        }
    }
}

