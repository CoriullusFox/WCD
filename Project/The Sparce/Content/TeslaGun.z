/* ----------------------------------------------------------------------------
** TEAM - We Couldn't Decide
** © 2017 DigiPen Institute of Technology, All Rights Reserved.
**
** FILE NAME
**
** Author:
** - Brandon Wolenetz
**
** Contributors:
** - <list in same format as author if applicable>
** --------------------------------------------------------------------------*/

class TeslaGun : ZilchComponent
{
    var Cooldown : Real = 0;
    
    [Property]
    var Damage : Real = 20;
    
    [Property]
    var EnergyUse : Real = 100;
    
    [Property]
    var Energy : Real = 100;
    
    [Property]
    var CooldownMax : Real = 5;
    
    [Property]
    var Player : Boolean = false;
    
    [Property]
    var CamZoom : Real = 10;
    function Initialize(init : CogInitializer)
    {
        this.LevelSettings.CameraViewport.Camera.Camera.Size = this.CamZoom;
        Zero.Connect(this.Owner, Events.Shoot, this.OnShoot);
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(this.GameSession, Events.Energy, this.OnEnergy);
    }
    
    function OnEnergy(event : Energy)
    {
        this.Energy = event.Energy;
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        //Cooldown logic
        this.Cooldown += event.Dt;
        if(this.Player)
        {
            var toSend = Cooldown();
            toSend.Cooldown = this.CooldownMax - this.Cooldown;
            toSend.MaxCooldown = this.CooldownMax;
            this.GameSession.DispatchEvent(Events.Cooldown, toSend);
        }
    }
    
    //Shooting logic (only runs when the event is called)
    function OnShoot(event : Shoot)
    {
        this.Player = event.Player;
        //only shoot if cooldown is over
        if(this.Cooldown >= this.CooldownMax && this.Energy >= this.EnergyUse)
        {
            if(this.Player)
            {
                //use energy
                this.Owner.EnergyStor.Energy -= this.EnergyUse;
            }
            
            
            this.Cooldown = 0;
            /** SHOOTING LOGIC HERE **/
            
            var toSend = Hurt();
            toSend.Damage = this.Damage;
            var filter = CastFilter();
            filter.IgnoreStatic = true;
            var cast = this.Space.PhysicsSpace.CastSphereResults(this.Owner.Transform.Translation, 10, 10, filter);
            Console.WriteLine(cast.Size());
            while (cast.Size() > 0)
            {
                if(this.Player)
                {
                    if(cast.Front().ObjectHit.Name != "TempPlayer")
                    {
                        cast.Front().ObjectHit.DispatchEvent(Events.Hurt, toSend);
                    }
                }
                else
                {
                    if(cast.Front().ObjectHit.Name != "Enemy")
                    {
                        cast.Front().ObjectHit.DispatchEvent(Events.Hurt, toSend);
                    }
                }
                cast.PopFront();
            }
            this.Space.CreateAtPosition(Archetype.Bullet_Tesla, this.Owner.Transform.Translation);
            
        }
    
    }
}
