/* ----------------------------------------------------------------------------
** TEAM - We Couldn't Decide
** © 2017 DigiPen Institute of Technology, All Rights Reserved.
**
** FILE NAME
**
** Author:
** - Hudson Green
**
** Contributors:
** - none
** --------------------------------------------------------------------------*/

class MuzzleFire : ZilchComponent
{
    
    [Property]
    var MuzzleFireParticle : Archetype = Archetype.Particle_MuzzleFire;
    
    var Scale               : Real3 = Real3(4, 4, 4);
    var CurrentDirection    : Real3 = Real3(0.42, -0.08, 0) * Real3(4, 4, 4);
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Owner, Events.Fire, this.OnFire);
    }

    function OnFire(event : Fire)
    {
        
        var selectedWeapon = this.Owner.FindChildByName("Weapon");
        
        if(selectedWeapon.Sprite.CurrentFrame == 5)
        {
            this.CurrentDirection = Real3(-0.15, -0.25, 0) * this.Scale;
        }
        else if(selectedWeapon.Sprite.CurrentFrame == 7)
        {
            this.CurrentDirection = Real3(0.38, -0.25, 0) * this.Scale;
        }
        else if(selectedWeapon.Sprite.CurrentFrame == 3)
        {
            this.CurrentDirection = Real3(-0.35, 0.1, 0) * this.Scale;
        }
        else if(selectedWeapon.Sprite.CurrentFrame == 1)
        {
            this.CurrentDirection = Real3(0.35, 0.1, 0) * this.Scale;
        }
        else if(selectedWeapon.Sprite.CurrentFrame == 2)
        {
            this.CurrentDirection = Real3(-0.35, 0.3, 0) * this.Scale;
        }
        else if(selectedWeapon.Sprite.CurrentFrame == 4)
        {
            this.CurrentDirection = Real3(-0.42, -0.08, 0) * this.Scale;
        }
        else if(selectedWeapon.Sprite.CurrentFrame == 6)
        {
            this.CurrentDirection = Real3(0.25, -0.25, 0) * this.Scale;
        }
        else if(selectedWeapon.Sprite.CurrentFrame == 0)
        {
            this.CurrentDirection = Real3(0.42, -0.08, 0) * this.Scale;
        }
        
        //var currentDirection = Math.Normalize(this.Owner.PlayerShooting.Direction);
        var currentDirection = this.Owner.Movement.CurrentDirection;
        
        var muzzleParticle = this.Space.CreateAtPosition(this.MuzzleFireParticle, this.CurrentDirection / 4);
        if(muzzleParticle != null)
        {
            
            muzzleParticle.AttachTo(this.Owner);
            
        }
    }
}
