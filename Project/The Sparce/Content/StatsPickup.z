/* ----------------------------------------------------------------------------
** TEAM - We Couldn't Decide
** © 2017 DigiPen Institute of Technology, All Rights Reserved.
**
** FILE NAME
**
** Author:
** - Sage Dupuy
**
** Contributors:
** - none
** --------------------------------------------------------------------------*/
enum Stat
{
    Health,
    Energy,
}
class StatsPickup : ZilchComponent
{
    [Property]
    var ChangeAmount : Integer = 0;
    
    [Property]
    var Stat : Stat = Stat.Health;
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Owner, Events.CollisionStarted, this.OnCollisionStarted);
    }
    
    function OnCollisionStarted(event : CollisionEvent)
    {
        //create easy access other object
        var otherObject = event.OtherObject;
        
        //check if other object is the player
        if(otherObject.Name == "TempPlayer")
        {
            //if stat equal to Health
            if(this.Stat == Stat.Health)
            {
                //check if stat is full
                if(otherObject.Health.ConfiguredHealth >= otherObject.Health.MaxHealth)
                {
                    Console.WriteLine("Health Full");
                    return;
                }
                else
                {
                    otherObject.Health.ConfiguredHealth += this.ChangeAmount;
                }
                
                
                if(otherObject.Health.ConfiguredHealth > otherObject.Health.MaxHealth)
                {
                    otherObject.Health.ConfiguredHealth = otherObject.Health.MaxHealth;
                }
                
                if(otherObject.Health.Player)
                {
                    var toSend = HealthToUI();
                    toSend.Health = otherObject.Health.ConfiguredHealth;
                    toSend.MaxHealth = otherObject.Health.MaxHealth;
                    otherObject.Health.GameSession.DispatchEvent(Events.HealthToUI, toSend);
                }
                this.Space.SoundSpace.PlayCue(SoundCue.Find("Environment_Door"));
                this.Owner.Destroy();
            }
            //if stat equal to Energy
            if(this.Stat == Stat.Energy)
            {
                //check if stat is full
                if(otherObject.EnergyStor.Energy >= otherObject.EnergyStor.MaxEnergy)
                {
                    Console.WriteLine("Energy Full");
                }
                //else if the stat level less than itself plus pickup number
                else if((otherObject.EnergyStor.Energy + this.ChangeAmount) <= otherObject.EnergyStor.MaxEnergy)
                {
                    otherObject.EnergyStor.Energy = otherObject.EnergyStor.Energy + this.ChangeAmount;
                    this.Owner.Destroy();
                }
            }
        }
    }
}
