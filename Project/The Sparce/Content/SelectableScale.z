/* ----------------------------------------------------------------------------
** TEAM - We Couldn't Decide
** © 2017 DigiPen Institute of Technology, All Rights Reserved.
**
** FILE NAME
**
** Author:
** - Brandon
**
** Contributors:
** - Hudson Green
** --------------------------------------------------------------------------*/

class SelectableScale : ZilchComponent
{
    
    [Property]
    var ScaleDirection : Real3 = Real3(1.0, 1.0, 1.0);
    
    [Property]
    var MaxScale : Real3 = Real3(1.25, 1.25, 1.0);
    
    [Property]
    var MinScale : Real3 = Real3(1.0, 1.0, 1.0);
    
    [Property]
    var ScaleSpeed : Real = 1.0;
    
    var Touching : Boolean = false;
    
    function Initialize(init : CogInitializer)
    {
        
        Math.Normalize(this.ScaleDirection);
        
        Zero.Connect(this.Owner, Events.MouseEnter, this.OnMouseEnter);
        Zero.Connect(this.Owner, Events.MouseExit, this.OnMouseExit);
        
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(this.Owner, Events.MouseDown, this.OnMouseDown);
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        
        var modifiedScaleSpeed = 0;
        
        if(this.Touching)
        {
            modifiedScaleSpeed = 0;
            while(this.Owner.Transform.Scale.X < this.MaxScale.X && this.Owner.Transform.Scale.Y < this.MaxScale.Y && modifiedScaleSpeed <= this.ScaleSpeed)
            {
                this.Owner.Transform.Scale += this.ScaleDirection * event.Dt * modifiedScaleSpeed;
                ++modifiedScaleSpeed;
            }
        }
        else
        {
            modifiedScaleSpeed = 0;
            while(this.Owner.Transform.Scale.X > this.MinScale.X && this.Owner.Transform.Scale.Y > this.MinScale.Y && modifiedScaleSpeed <= this.ScaleSpeed)
            {
                this.Owner.Transform.Scale -= this.ScaleDirection * event.Dt * this.ScaleSpeed;
                ++modifiedScaleSpeed;
                
            }
        }
        
    }

    function OnMouseExit(event : ViewportMouseEvent)
    {
        this.Touching = false;
    }

    function OnMouseEnter(event : ViewportMouseEvent)
    {
        this.Touching = true;
    }
    
    function OnMouseDown(event : ViewportMouseEvent)
    {
        this.Space.SoundSpace.PlayCue(SoundCue.UI_Button_Click);
    }
    
}
