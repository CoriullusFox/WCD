/* ----------------------------------------------------------------------------
** TEAM - We Couldn't Decide
** (c) 2017 DigiPen Institute of Technology, All Rights Reserved.
**
** FILE NAME
**
** Author:
** - Hudson Green
**
** Contributors:
** - none
** --------------------------------------------------------------------------*/

/**
    THIS FILE INITIALIZES THE GUNS AND THEIR PROPERTIES. IT WILL ALSO CONTAIN CRAFTING FOR THE GUNS! THIS DOES NOT MANAGE SHOOTING AT ALL!

    CHANGELOG:
        - ADDED TIERS
        - ADDED CRAFTING
        - MADE TO BE EASILY MODIFIED

**/

// STILL BEING EDITED!

enum Guns
{
    Pistol,
    Shotgun,
    Minigun,
    Rifle,
    Beam
}

class GunManager : ZilchComponent
{
    
    // LINK ITEM ID/MANAGER CLASS
    var Item : ItemManager = null;
    
    /* ARCHRTYPE PROPERTIES */
    
    [Property]
    var SelectedWeapon      : Guns = Guns.Pistol;
    
    [Property]
    var ArchetypePistol     : Archetype = Archetype.BulletTest;
    
    [Property]
    var ArchetypeShotgun    : Archetype = Archetype.BulletTest;
    
    [Property]
    var ArchetypeMinigun    : Archetype = Archetype.BulletTest;
    
    [Property]
    var ArchetypeRifle      : Archetype = Archetype.BulletTest;
    
    [Property]
    var ArchetypeBeam       : Archetype = Archetype.BulletTest;
    
    /* WEAPON CLIP SIZE PROPERTIES */
    
    [Property]
    var ClipPistol      : Real = -99;
    
    [Property]
    var ClipShotgun     : Real = 6;
    
    [Property]
    var ClipMinigun     : Real = 500;
    
    [Property]
    var ClipRifle       : Real = 8;
    
    [Property]
    var ClipBeam        : Real = 2;
    
    /* WEAPON TIER PROPERTIES */
    
    [Property]
    var TierPistol      : Integer = 1;
    
    [Property]
    var TierShotgun     : Integer = 1;
    
    [Property]
    var TierMinigun     : Integer = 1;
    
    [Property]
    var TierRifle       : Integer = 1;
    
    [Property]
    var TierBeam        : Integer = 1;
    
    /* WEAPON CRAFTING RECIPES (USING ITEM IDs) */
    
    [Property]
    var RecipePistol  : Real3 = Real3
    (
        111,
        211,
        111
    );
    
    [Property]
    var RecipeShotgun : Real3 = Real3
    (
        111,
        511,
        111
    );
    
    // SET WEAPON PROPERTIES
    // (spread, spreadAmount, distBetweenShots, bulletSpeed, lifespan, randVary, cooldown)
    var Pistol  : Gun = new Gun(false, 0.05, 0.0, 50.0, 0.3, 0.01, 0.3);
    var Shotgun : Gun = new Gun(true, 0.2, 0.1, 50, 0.5, 0.01, 0.4);
    var Minigun : Gun = new Gun(false, 0.09, 0.0, 45.0, 0.4, 0.05, 0.0);
    var Rifle   : Gun = new Gun(false, 0.01, 0.0, 45.0, 2.0, 0.01, 1.0);
    var Beam    : Gun = new Gun(false, 0.0, 0.0, 0.0, 2.0, 0.0, 5.0);
    
    // SELECTED WEAPON PROPERTIES
    var SelectedGun         : Gun;
    var SelectedGunSprite   : Archetype = Archetype.MissingTexture;
    
    function Initialize(init : CogInitializer)
    {
        
        // SET WEAPON TEXTURES
        this.Pistol.SetTexture(this.ArchetypePistol);
        this.Shotgun.SetTexture(this.ArchetypeShotgun);
        this.Minigun.SetTexture(this.ArchetypeMinigun);
        this.Rifle.SetTexture(this.ArchetypeRifle);
        this.Beam.SetTexture(this.ArchetypeBeam);
        
        // SET WEAPON CRAFTING RECIPES
        this.Pistol.SetCraftingRecipe(this.RecipePistol);
        this.Shotgun.SetCraftingRecipe(this.RecipeShotgun);
        
        // SET CLIP SIZE
        this.Pistol.SetClipSize(this.ClipPistol);
        this.Shotgun.SetClipSize(this.ClipShotgun);
        this.Minigun.SetClipSize(this.ClipMinigun);
        this.Rifle.SetClipSize(this.ClipRifle);
        this.Beam.SetClipSize(this.ClipBeam);
        
        // SET DEFAULT GUN
        this.SelectedGun = this.Pistol;
        this.SelectedGunSprite = this.ArchetypePistol;
        
        // CONNECTS OTHER FUNCTIONS
        Zero.Connect(this.Space, Events.LogicUpdate, this.UpdateWeaponProperties);
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnWeaponSwap);
        
    }
    
    function UpdateWeaponProperties(event : Event) {
        
        // SET WEAPON TIER
        this.Pistol.SetTier(this.TierPistol);
        this.Shotgun.SetTier(this.TierShotgun);
        this.Minigun.SetTier(this.TierMinigun);
        this.Rifle.SetTier(this.TierRifle);
        this.Beam.SetTier(this.TierBeam);
        
    }

    function OnWeaponSwap(event : Event)
    {
        
        // SET ACTIVE WEAPON
        if(this.SelectedWeapon == Guns.Pistol)
        {
            this.Pistol.SetAsActive(true);
            this.Shotgun.SetAsActive(false);
            this.Minigun.SetAsActive(false);
            this.Rifle.SetAsActive(false);
            this.Beam.SetAsActive(false);
            this.SelectedWeapon = Guns.Pistol;
            this.SelectedGun = this.Pistol;
            this.SelectedGunSprite = this.ArchetypePistol;
        }
        else if(this.SelectedWeapon == Guns.Shotgun)
        {
            this.Pistol.SetAsActive(false);
            this.Shotgun.SetAsActive(true);
            this.Minigun.SetAsActive(false);
            this.Rifle.SetAsActive(false);
            this.Beam.SetAsActive(false);
            this.SelectedWeapon = Guns.Shotgun;
            this.SelectedGun = this.Shotgun;
            this.SelectedGunSprite = this.ArchetypeShotgun;
        }
        else if(this.SelectedWeapon == Guns.Minigun)
        {
            this.Pistol.SetAsActive(false);
            this.Shotgun.SetAsActive(false);
            this.Minigun.SetAsActive(true);
            this.Rifle.SetAsActive(false);
            this.Beam.SetAsActive(false);
            this.SelectedWeapon = Guns.Minigun;
            this.SelectedGun = this.Minigun;
            this.SelectedGunSprite = this.ArchetypeMinigun;
        }
        else if(this.SelectedWeapon == Guns.Rifle)
        {
            this.Pistol.SetAsActive(false);
            this.Shotgun.SetAsActive(false);
            this.Minigun.SetAsActive(false);
            this.Rifle.SetAsActive(true);
            this.Beam.SetAsActive(false);
            this.SelectedWeapon = Guns.Rifle;
            this.SelectedGun = this.Rifle;
            this.SelectedGunSprite = this.ArchetypeRifle;
        }
        else if(this.SelectedWeapon == Guns.Beam)
        {
            this.Pistol.SetAsActive(false);
            this.Shotgun.SetAsActive(false);
            this.Minigun.SetAsActive(false);
            this.Rifle.SetAsActive(false);
            this.Beam.SetAsActive(true);
            this.SelectedWeapon = Guns.Beam;
            this.SelectedGun = this.Beam;
            this.SelectedGunSprite = this.ArchetypeBeam;
        }
        
    }
    
}

// CREATE GUN CLASS
class Gun
{
    
    var Spread              : Boolean = false;
    var SpreadAmount        : Real = 0;
    var DistBetweenShots    : Real = 0.0;
    var BulletSpeed         : Real = 50.0;
    var Lifespan            : Real = 1.0;
    var RandomVariation     : Real = 1.0;
    var Cooldown            : Real = 1.0;
    var SpriteImage         : Archetype = null;
    var IsActive            : Boolean = false;
    var WeaponTier          : Real = 1;
    var AmmoCount           : Real = -99;
    var EjectBullet         : Boolean = false;
    
    // DEFAULT CRAFTING RECIPE (1 = NOTHING, -111, -111, -111 MEANS THE ITEM HAS NO CRAFTING RECIPE)
    var CraftingRecipe : Real3 = Real3
    (
        -111,
        -111,
        -111
    );
    
    function SetTier(weaponTier : Real)
    {
        this.WeaponTier = weaponTier;
    }
    
    // CLASS PARAMS
    [Virtual]
    constructor(spread : Boolean, spreadAmount : Real, distBetweenShots : Real, bulletSpeed : Real, lifespan : Real, randVary : Real, cooldown : Real)
    {
        
        var tier = this.WeaponTier;
        var tierLowerProperty = this.WeaponTier - 1;
        
        // ONLY APPLY TIER BONUS IF WEAPON IS HIGHER THAN TIER ONE
        if(this.WeaponTier > 1)
        {
            tier = this.WeaponTier + 0.2;
            tierLowerProperty = (this.WeaponTier - 1) / 6;
        }
        
        this.Spread           = spread;
        this.SpreadAmount     = spreadAmount;
        this.DistBetweenShots = distBetweenShots - tierLowerProperty;
        this.BulletSpeed      = bulletSpeed + tier;
        this.Lifespan         = lifespan;
        this.RandomVariation  = randVary;
        this.Cooldown         = cooldown - tierLowerProperty;
        this.SpriteImage      = Archetype.MissingTexture;
        
        if(this.DistBetweenShots < 0)
        {
            this.DistBetweenShots = 0;
        }
        
        if(this.Cooldown < 0)
        {
            this.Cooldown = 0;
        }
        
    }
    
    function SetTexture(spriteImg : Archetype)
    {
        this.SpriteImage = spriteImg;
    }
    
    [Virtual]
    function SetAsActive(isActive : Boolean)
    {
        this.IsActive = isActive;
    }
    
    [Virtual]
    function SetCraftingRecipe(craftingRecipe : Real3)
    {
        this.CraftingRecipe = craftingRecipe;
    }
    
    [Virtual]
    function SetClipSize(ammoCount : Real)
    {
        this.AmmoCount = ammoCount;
    }
    
    [Virtual]
    function EjectEmptyShell(ejectBullet : Boolean)
    {
        this.EjectBullet = ejectBullet;
    }
    
}