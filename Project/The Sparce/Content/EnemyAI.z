/* ----------------------------------------------------------------------------
** TEAM - We Couldn't Decide
** © 2017 DigiPen Institute of Technology, All Rights Reserved.
**
** FILE NAME
**
** Author:
** - Sage Dupuy
**
** Contributors:
** - Brandon Wolenetz
** --------------------------------------------------------------------------*/

class EnemyAI : ZilchComponent
{
    [Property]
    var ChaseProximity : Real = 10.0;
    
    [Property]
    var ShootProximity : Real = 40.0;
    
    [Property]
    var Speed : Integer = 100;
    
    [Property]
    var LookDirection : Real3 = Real3(0,1,0);
    
    [Property]
    var MoveDirection : Real3 = Real3(0.0, 0.0, 0.0);
    
    [Property]
    var Pathfind : Boolean = true;
    
    [Property]
    var Debug : Boolean = false;
    
    [Property]
    var ResponceTime : Real = 2;
    
    var Timer : Real;
    
    var PathFindTimer : Real = 0.25;
    
    
    var Path : Array[Node] = Array[Node]();
    
    
    
    
    function Initialize(init : CogInitializer)
    {
        this.Timer = this.ResponceTime;
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        this.PathFindTimer -= event.Dt;
        this.Timer -= event.Dt;
        var player = this.Space.FindObjectByName("TempPlayer");
        if (player == null) return;
        var distanceFromPlayer = Math.Distance(this.Owner.Transform.Translation, player.Transform.Translation);
        
        if(this.Pathfind && this.Path != null && this.Path.Count > 1)
        {
            
            
            var temp = this.Path[0].WorldPos;
            //draw debug lines
            if(this.Debug)
                {
                for (var i = 1; i < this.Path.Count; ++i)
                {
                    var debugLine = DebugLine();
                    debugLine.Start(temp);
                    debugLine.End(this.Path[i].WorldPos);
                    debugLine.Float4Color(Real4(0,0,1,1));
                    debugLine.Width(3);
                    temp = this.Path[i].WorldPos;
                    debugLine.Draw();
                    
                }
            }
            
            //follow path
            if(Math.Distance(this.Path[0].WorldPos, this.Owner.Transform.Translation) > 0.3)
            {
                this.MoveDirection = this.Path[0].WorldPos - this.Owner.Transform.Translation;
            }
            else
            {
                if(distanceFromPlayer < this.ChaseProximity && this.PathFindTimer <= 0 && this.Pathfind)
                {
                    this.PathFindTimer = 0.25;
                    this.Timer = this.ResponceTime;
                    var myPos = this.Owner.Transform.Translation - Real3(0, this.Owner.Transform.Scale.Y / 4, 0);
                    var playerPos = player.Transform.Translation - Real3(0, player.Transform.Scale.Y / 4, 0);
                    this.Path = this.Space.FindObjectByName("PlayerSpawnPoint").AStarPathfind.PathFind(myPos, playerPos);
                }
                if(this.Path.Count > 0)
                {
                    this.Path.RemoveAt(0);
                }
                if(this.Path.Count > 0) this.MoveDirection = this.Path[0].WorldPos - this.Owner.Transform.Translation;
            }
            
            this.Move(this.MoveDirection);
            
            
            
        }
        
        
        if(distanceFromPlayer < this.ChaseProximity)
        {
            
            if((this.Path.Count <= 1 || this.Timer <= 0) && this.PathFindTimer <= 0 && this.Pathfind)
            {
                this.PathFindTimer = 0.25;
                this.Timer = this.ResponceTime;
                this.Path = this.Space.FindObjectByName("PlayerSpawnPoint").AStarPathfind.PathFind(this.Owner.Transform.Translation, this.Space.FindObjectByName("TempPlayer").Transform.Translation);
            }
            
            if(!this.Pathfind || this.Path.Count <= 1)
            {
                
                this.MoveDirection = this.Space.FindObjectByName("TempPlayer").Transform.Translation - this.Owner.Transform.Translation;
                this.Move(this.MoveDirection);
            }
        }
        
        if(distanceFromPlayer < this.ShootProximity)
        {
            //raycast for shooting
            var ray = Ray();
            ray.Start = this.Owner.Transform.Translation;
            ray.Direction = this.LookDirection;
            var cast = this.Space.PhysicsSpace.CastRayFirst(ray);
            var debugLine = DebugLine();
            if(this.Debug)
            {
                debugLine.Start(this.Owner.Transform.Translation);
                debugLine.End(cast.WorldPosition);
                debugLine.Draw();
            }
            if (cast.ObjectHit != null)
            {
                if(cast.ObjectHit.Name == "TempPlayer")
                {
                    var toSend = Shoot();
                    toSend.Direction = this.LookDirection;
                    this.Owner.DispatchEvent(Events.Shoot, toSend);
                }
            }
        }
        
    }
    function Move(dir : Real3)
    {
        
        this.Owner.RigidBody.Velocity = Math.Normalize(dir) * this.Space.TimeSpace.Dt * this.Speed;
        
    }
}
