/* ----------------------------------------------------------------------------
** TEAM - We Couldn't Decide
** © 2017 DigiPen Institute of Technology, All Rights Reserved.
**
** FILE NAME
**
** Author:
** - Sage Dupuy
**
** Contributors:
** - Brandon Wolenetz
** --------------------------------------------------------------------------*/

class EnemyAI : ZilchComponent
{
    [Property]
    var ChaseProximity : Real = 10.0;
    
    [Property]
    var ShootProximity : Real = 40.0;
    
    [Property]
    var Speed : Integer = 100;
    
    [Property]
    var LookDirection : Real3 = Real3(0,1,0);
    
    [Property]
    var MoveDirection : Real3 = Real3(0.0, 0.0, 0.0);
    
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        var distanceFromPlayer = Math.Distance(this.Owner.Transform.Translation, this.Space.FindObjectByName("TempPlayer").Transform.Translation);
        
        if(distanceFromPlayer < this.ChaseProximity)
        {
            
            var path = this.Space.FindObjectByName("PlayerSpawnPoint").AStarPathfind.PathFind(this.Owner.Transform.Translation, this.Space.FindObjectByName("TempPlayer").Transform.Translation);
            
            
            if(path != null && path.Count > 1)
            {
                
                
                var temp = path[0].WorldPos;
                //draw debug lines
                for (var i = 1; i < path.Count; ++i)
                {
                    var debugLine = DebugLine();
                    debugLine.Start(temp);
                    debugLine.End(path[i].WorldPos);
                    debugLine.Float4Color(Real4(0,0,1,1));
                    debugLine.Width(3);
                    temp = path[i].WorldPos;
                    debugLine.Draw();
                    
                }
                
                
                this.MoveDirection = path[1].WorldPos - this.Owner.Transform.Translation;
                
                Math.Clamp(this.MoveDirection, Real3(0,0,0), Real3(0.1,0.1,0.1));
                
                this.Owner.RigidBody.Velocity = this.MoveDirection * event.Dt * this.Speed;
                
                
            }
            else
            {
                
                this.MoveDirection = this.Space.FindObjectByName("TempPlayer").Transform.Translation - this.Owner.Transform.Translation;
                
                Math.Clamp(this.MoveDirection, Real3(0,0,0), Real3(0.1,0.1,0.1));
                
                this.Owner.RigidBody.Velocity  = this.MoveDirection * event.Dt * this.Speed;
            }
        }
        
        if(distanceFromPlayer < this.ShootProximity)
        {
            var toSend = Shoot();
            toSend.Direction = this.LookDirection;
            this.Owner.DispatchEvent(Events.Shoot, toSend);
        }
        
    }
}
