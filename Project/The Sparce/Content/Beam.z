/* ----------------------------------------------------------------------------
** TEAM - We Couldn't Decide
** © 2017 DigiPen Institute of Technology, All Rights Reserved.
**
** FILE NAME
**
** Author:
** - Brandon Wolenetz
**
** Contributors:
** - <list in same format as author if applicable>
** --------------------------------------------------------------------------*/

//makes the beam extend intead of just appear, also fades beam, and handles beam damage

class Beam : ZilchComponent
{
    [Property]
    var Speed : Real = 10;
    
    var DPS : Real = 50;
    var PlayerBeam : Boolean = false;
    var Extend : Boolean = true;
    var New : Boolean = false;
    
    var Dir : Real3;
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(this.Owner, Events.CollisionPersisted, this.OnCollisionPersisted);
    }

    function OnCollisionPersisted(event : CollisionEvent)
    {
        if(!this.New)
        {
            this.Owner.Destroy();
        }
        if(event.OtherObject.Name != "Enemy" && event.OtherObject.Name != "TempPlayer")
        {
            
            this.Extend = false;
            
        }
        
        //handling damage
        if(this.PlayerBeam)
        {
            if(event.OtherObject.Name != "TempPlayer" && event.OtherObject.Name != this.Owner.Name)
            {
                var toSend = Hurt();
                toSend.Damage = this.DPS * this.Space.TimeSpace.Dt;
                event.OtherObject.DispatchEvent(Events.Hurt, toSend);
                
            }
        }
        else
        {
            
            if(event.OtherObject.Name != "Enemy" && event.OtherObject.Name != this.Owner.Name)
            {
                var toSend = Hurt();
                toSend.Damage = this.DPS * this.Space.TimeSpace.Dt;
                event.OtherObject.DispatchEvent(Events.Hurt, toSend);
                
            }
            
        }
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        
        var randGen : Random = Random();
        //angle of rotation
        var angle = Math.Angle2D(this.Dir);
        
        //generate direction for orientation component from angle
        var newDirection = Real3(Math.Cos(angle), Math.Sin(angle), 0);
        
        var filter = CastFilter();
        filter.IgnoreDynamic = true;
        filter.IgnoreStatic = false;
        filter.IgnoreGhost = true;
        var ray = Ray();
        ray.Start = this.Owner.Transform.WorldTranslation;
        ray.Direction = newDirection;
        var cast = this.Space.PhysicsSpace.CastRayFirstFiltered(ray, filter);
        this.Owner.Transform.Scale = Real3(1,cast.Distance, 1);
    }
}
