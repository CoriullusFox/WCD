/* ----------------------------------------------------------------------------
** TEAM - We Couldn't Decide
** © 2017 DigiPen Institute of Technology, All Rights Reserved.
**
** FILE NAME
**
** Author:
** - Brandon Wolenetz
**
** Contributors:
** - Hudson Green
** --------------------------------------------------------------------------*/

class BeamLaser : ZilchComponent
{
    var Cooldown : Real = 0;
    
    [Property]
    var Bullet : Archetype = Archetype.Bullet_Beam;
    
    [Property]
    var DPS : Real = 10;
    
    [Property]
    var EnergyUse : Real = 25;
    
    [Property]
    var Energy : Real = 100;
    
    [Property]
    var CooldownMax : Real = 0;
    
    [Property]
    var Player : Boolean = false;
    
    
    [Property]
    var CamZoom : Real = 20;
    
    
    var CreatedBullet : Cog = null;
    
    var Shooting : Boolean = false;
    
    var Fix : Boolean = true;
    
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Owner, Events.Shoot, this.OnShoot);
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(this.GameSession, Events.Energy, this.OnEnergy);
    }
    
    function OnEnergy(event : Energy)
    {
        this.Energy = event.Energy;
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        
        if(!Zero.Keyboard.KeyIsDown(Keys.Space) && !Zero.Mouse.IsButtonDown(MouseButtons.Left) && this.CreatedBullet != null)
        {
            this.CreatedBullet.Destroy();
        }
        if (this.Player)
            this.LevelSettings.CameraViewport.Camera.Camera.Size = Math.Lerp(this.LevelSettings.CameraViewport.Camera.Camera.Size, this.CamZoom / 2, event.Dt * 10);
                //Cooldown logic
        this.Cooldown += event.Dt;
        if(this.Player)
        {
            var toSend = Cooldown();
            toSend.Cooldown = this.CooldownMax - this.Cooldown;
            toSend.MaxCooldown = this.CooldownMax;
            this.GameSession.DispatchEvent(Events.Cooldown, toSend);
        }
        
    }
    
    //Shooting logic (only runs when the event is called)
    function OnShoot(event : Shoot)
    {
        if(this.Fix)
        {
                this.Fix = false;
            }
            else
            {
            if(this.Energy >= this.EnergyUse * this.Space.TimeSpace.Dt && this.CreatedBullet != null)
            {
                this.Owner.EnergyStor.Energy -= this.EnergyUse * this.Space.TimeSpace.Dt;
                Console.WriteLine("found");
                this.CreatedBullet.Beam.Dir = event.Direction;
                
                var randGen : Random = Random();
                //angle of rotation
                var angle = Math.Angle2D(event.Direction);
                
                //generate direction for orientation component from angle
                var newDirection = Real3(Math.Cos(angle), Math.Sin(angle), 0);
                
                this.CreatedBullet.Orientation.LookAtDirection(newDirection);
                this.CreatedBullet.Transform.WorldTranslation = this.Owner.Transform.WorldTranslation + Real3(0,0,-0.1);
                return;
            }
            else if (this.CreatedBullet != null)
            {
                Console.WriteLine("not found");
                this.CreatedBullet.Destroy();
            }
            this.Player = event.Player;
            //only shoot if cooldown is over
            if(this.Cooldown >= this.CooldownMax && this.Energy >= this.EnergyUse)
            {
                this.Owner.DispatchEvent(Events.Fire, Fire());
                
                
                this.Cooldown = 0;
                /** SHOOTING LOGIC HERE **/
                
                
                if(this.Bullet != null)
                {
                    this.Space.SoundSpace.PlayCue(SoundCue.Find("Gun_WahwahLaser"));
                    
                    this.CreatedBullet = this.Space.CreateAtPosition(this.Bullet, this.Owner.Transform.Translation);
                    if(this.Player)
                    {
                        
                        var toSend = ScreenShake();
                        toSend.Intencity = 0.01;
                        toSend.Timer = 0.1;
                        toSend.FadeSpeed = 0.1;
                        this.Space.DispatchEvent(Events.ScreenShake, toSend);
                        
                    }
                    if(this.CreatedBullet != null)
                    {
                        this.CreatedBullet.Beam.New = true;
                        
                        this.CreatedBullet.AttachTo(this.Owner);
                        
                        var randGen : Random = Random();
                        //angle of rotation
                        var angle = Math.Angle2D(event.Direction);
                        
                        //generate direction for orientation component from angle
                        var newDirection = Real3(Math.Cos(angle), Math.Sin(angle), 0);
                        
                        //apply direction and movement
                        this.CreatedBullet.Orientation.LookAtDirection(newDirection);
                        
                        
                        
                        //set whether or not the beam is from the player
                        this.CreatedBullet.Beam.PlayerBeam = this.Player;
                        this.CreatedBullet.Beam.DPS = this.DPS;
                    }
                }
            }
        }
    
    }
}
