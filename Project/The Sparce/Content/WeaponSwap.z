/* ----------------------------------------------------------------------------
** TEAM - We Couldn't Decide
** © 2017 DigiPen Institute of Technology, All Rights Reserved.
**
** FILE NAME
**
** Author:
** - Brandon Wolenetz
**
** Contributors:
** - Hudson Green
** --------------------------------------------------------------------------*/


class WeaponSwap : ZilchComponent
{
    [Property]
    var ShotgunUnlocked : Boolean = false;
    [Property]
    var MinigunUnlocked : Boolean = false;
    [Property]
    var BeamLaserUnlocked : Boolean = false;
    [Property]
    var RifleUnlocked : Boolean = false;
    [Property]
    var FlamethrowerUnlocked : Boolean = false;
    [Property]
    var BouncerUnlocked : Boolean = false;
    [Property]
    var TeslaUnlocked : Boolean = false;
    [Property]
    var ChainEUnlocked : Boolean = false;
    [Property]
    var FreezeUnlocked : Boolean = false;
    [Property]
    var DisableLockedWeaponSelect : Boolean = true;
    
    [Property]
    var WeaponVisual : CogPath = null;
    
    var NoPistol : Boolean = false;
    
    var NumberOfWeapons : Integer = 10;
    //var PrevSelected : Integer = 0;
    
    //to add a new gun add a boolean for it beaing unlocked, example: [Property] var GunUnlocked : Boolean = false;
    //than increase "NumberOfWeapons" by one
    //than scroll down to see more instructions :)
    
    
    var Selected : Integer = 0;
    
    var Once : Boolean = false;
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.MouseScroll, this.OnMouseScroll);
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        if(this.NoPistol)
        {
            this.RemoveComponents();
            this.WeaponVisual.Cog.Sprite.Visible = false;
            var sendSelected = SelectedGun();
        
            sendSelected.Selected = "";
            sendSelected.Unlocked = false;
            this.GameSession.DispatchEvent(Events.SelectedGun, sendSelected);
        }
        else
        {
            this.WeaponVisual.Cog.Sprite.Visible = true;
        }
        if(!this.Once)
        {
            this.Once = !this.Once;
            this.RemoveComponents();
            this.AddNewComponent("Pistol", true);
        }
    }
    
    function OnMouseScroll(event : ViewportMouseEvent)
    {
        
        if(event.Scroll.Y > 0)
        {
            ++this.Selected;
        }
        else if(event.Scroll.Y < 0)
        {
            --this.Selected;
        }
        
        while(true)
        {
            
            //remove components and clamp selected
            this.RemoveComponents();
            
            if(this.Selected > this.NumberOfWeapons - 1)
            {
                this.Selected = 0;
                //this.PrevSelected = this.NumberOfWeapons - 1;
            }
            else if(this.Selected < 0)
            {
                this.Selected = this.NumberOfWeapons - 1;
                //this.PrevSelected = 0;
            }
            //add new components and check if unlocked
            var init : CogInitializer = null;
            if(this.Selected == 0)
            {
                this.AddNewComponent("Pistol", true);
                //this.IsSelectableWeapon(true);
                //this.PrevSelected = 0;
            }
            else if(this.Selected == 1)
            {
                if(this.ShotgunUnlocked)
                {
                    this.AddNewComponent("Shotgun", this.ShotgunUnlocked);
                }
                else
                {
                    if(event.Scroll.Y > 0)
                        ++this.Selected;
                    else if(event.Scroll.Y < 0)
                        --this.Selected;
                    continue;
                }
                //this.IsSelectableWeapon(this.ShotgunUnlocked);
                //this.PrevSelected = 1;
            }
            else if(this.Selected == 2)
            {
                if(this.MinigunUnlocked)
                {
                this.AddNewComponent("Minigun", this.MinigunUnlocked);
                }
                else
                {
                    if(event.Scroll.Y > 0)
                        ++this.Selected;
                    else if(event.Scroll.Y < 0)
                        --this.Selected;
                    continue;
                }
                //this.IsSelectableWeapon(this.MinigunUnlocked);
                //this.PrevSelected = 2;
            }
            else if(this.Selected == 3)
            {
                if(this.BeamLaserUnlocked)
                {
                this.AddNewComponent("BeamLaser", this.BeamLaserUnlocked);
                }
                else
                {
                    if(event.Scroll.Y > 0)
                        ++this.Selected;
                    else if(event.Scroll.Y < 0)
                        --this.Selected;
                    continue;
                }
                //this.IsSelectableWeapon(this.BeamLaserUnlocked);
                //this.PrevSelected = 3;
            }
            else if(this.Selected == 4)
            {
                if(this.RifleUnlocked)
                {
                this.AddNewComponent("Rifle", this.RifleUnlocked);
                }
                else
                {
                    if(event.Scroll.Y > 0)
                        ++this.Selected;
                    else if(event.Scroll.Y < 0)
                        --this.Selected;
                    continue;
                }
                //this.IsSelectableWeapon(this.RifleUnlocked);
                //this.PrevSelected = 4;
            }
            else if(this.Selected == 5)
            {
                if(this.FlamethrowerUnlocked)
                {
                this.AddNewComponent("FlameThrower", this.FlamethrowerUnlocked);
                }
                else
                {
                    if(event.Scroll.Y > 0)
                        ++this.Selected;
                    else if(event.Scroll.Y < 0)
                        --this.Selected;
                    continue;
                }
                //this.IsSelectableWeapon(this.FlamethrowerUnlocked);
                //this.PrevSelected = 5;
            }
            else if(this.Selected == 6)
            {
                if(this.BouncerUnlocked)
                {
                this.AddNewComponent("Bouncer", this.BouncerUnlocked);
                }
                else
                {
                    if(event.Scroll.Y > 0)
                        ++this.Selected;
                    else if(event.Scroll.Y < 0)
                        --this.Selected;
                    continue;
                }
                //this.IsSelectableWeapon(this.BouncerUnlocked);
                //this.PrevSelected = 6;
            }
            else if(this.Selected == 7)
            {
                if(this.TeslaUnlocked)
                {
                this.AddNewComponent("TeslaGun", this.TeslaUnlocked);
                }
                else
                {
                    if(event.Scroll.Y > 0)
                        ++this.Selected;
                    else if(event.Scroll.Y < 0)
                        --this.Selected;
                    continue;
                }
                //this.IsSelectableWeapon(this.TeslaUnlocked);
                //this.PrevSelected = 7;
            }
            else if(this.Selected == 8)
            {
                if(this.ChainEUnlocked)
                {
                this.AddNewComponent("ChainElectricity", this.ChainEUnlocked);
                }
                else
                {
                    if(event.Scroll.Y > 0)
                        ++this.Selected;
                    else if(event.Scroll.Y < 0)
                        --this.Selected;
                    continue;
                }
                //this.IsSelectableWeapon(this.TeslaUnlocked);
                //this.PrevSelected = 7;
            }
            
            else if(this.Selected == 9)
            {
                if(this.FreezeUnlocked)
                {
                this.AddNewComponent("FreezeRay", this.FreezeUnlocked);
                }
                else
                {
                    if(event.Scroll.Y > 0)
                        ++this.Selected;
                    else if(event.Scroll.Y < 0)
                        --this.Selected;
                    continue;
                }
                //this.IsSelectableWeapon(this.TeslaUnlocked);
                //this.PrevSelected = 7;
            }
            
            if(this.Selected > this.NumberOfWeapons - 1)
            {
                this.Selected = 0;
                continue;
            }
            
            break;
            
        }
        //INSTRUCTIONS! add a new else if statement here! that looks exactly like the one above it but the name being the name of your gun component, and the boolean being the unlocked bool for your gun!
    }
    
    function RemoveComponents()
    {
        
        this.Owner.RemoveComponentByName("Pistol");
        this.Owner.RemoveComponentByName("Shotgun");
        this.Owner.RemoveComponentByName("Minigun");
        this.Owner.RemoveComponentByName("BeamLaser");
        this.Owner.RemoveComponentByName("Rifle");
        this.Owner.RemoveComponentByName("FlameThrower");
        this.Owner.RemoveComponentByName("Bouncer");
        this.Owner.RemoveComponentByName("TeslaGun");
        this.Owner.RemoveComponentByName("ChainElectricity");
        this.Owner.RemoveComponentByName("FreezeRay");
        //INSTRUCTIONS! add code to disable your gun component here, example: this.Owner.RemoveComponentByName("BlahGun");
        
    }
    function AddNewComponent(name : String, unlocked : Boolean)
    {
        if(unlocked)
        {
            //send shoot event to tell script that is's on a player
            var toSend = Shoot();
            toSend.Player = true;
            this.Owner.DispatchEvent(Events.Shoot, toSend);
            
            var init : CogInitializer = null;
            this.Owner.AddComponentByName(name);
            
            if(this.Owner.Pistol != null)
            {
                this.Owner.Pistol.Initialize(init);
            }
            if(this.Owner.Shotgun != null)
            {
                this.Owner.Shotgun.Initialize(init);
            }
            if(this.Owner.Minigun != null)
            {
                this.Owner.Minigun.Initialize(init);
            }
            if(this.Owner.BeamLaser != null)
            {
                this.Owner.BeamLaser.Initialize(init);
            }
            if(this.Owner.Rifle != null)
            {
                this.Owner.Rifle.Initialize(init);
            }
            if(this.Owner.FlameThrower != null)
            {
                this.Owner.FlameThrower.Initialize(init);
            }
            if(this.Owner.Bouncer != null)
            {
                this.Owner.Bouncer.Initialize(init);
            }
            if(this.Owner.TeslaGun != null)
            {
                this.Owner.TeslaGun.Initialize(init);
            }
            if(this.Owner.ChainElectricity != null)
            {
                this.Owner.ChainElectricity.Initialize(init);
            }
            if(this.Owner.FreezeRay != null)
            {
                this.Owner.FreezeRay.Initialize(init);
            }
            //INSTRUCTIONS add a new if statement for initializing the component of the gun that you are adding!
            
            //send shoot event to tell script that is's on a player
            this.Owner.DispatchEvent(Events.Shoot, toSend);
        
        }
        
        var sendSelected = SelectedGun();
        
        sendSelected.Selected = name;
        sendSelected.Unlocked = unlocked;
        this.GameSession.DispatchEvent(Events.SelectedGun, sendSelected);
        
    }
    
}
