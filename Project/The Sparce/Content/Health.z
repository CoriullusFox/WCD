/* ----------------------------------------------------------------------------
** TEAM - We Couldn't Decide
** © 2017 DigiPen Institute of Technology, All Rights Reserved.
**
** Health.z
**
** Author:
** - Hudson Green
**
** Contributors:
** - Brandon Wolenetz
** --------------------------------------------------------------------------*/

class Health : ZilchComponent
{
    
    // CONFIGURABLE HEALTH PROPERTY
    [Property]
    var ConfiguredHealth    : Real = 50;
    
    [Property]
    var ArchetypeAmmoBar    : Archetype = Archetype.HealthBar;
    
    [Property]
    var MiniHeathBar        : Boolean = true;
    
    [Property]
    var Player              : Boolean = false;
    
    //REGEN
    [Property]
    var RegenRate : Real = 0.5;
    
    var MaxHealth : Real;
    
    var FreezeTimer : Real = 0;
    
    function Initialize(init : CogInitializer)
    {
        
        this.MaxHealth = this.ConfiguredHealth;
        
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(this.Owner, Events.Hurt, this.OnHurt);
        
    }

    function OnHurt(event : Hurt)
    {
        this.ConfiguredHealth -= event.Damage;
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        
        var healthDecrease = this.MaxHealth - this.ConfiguredHealth;
        
        var healthInPercent = 100 - (healthDecrease / (this.MaxHealth + 0.001) * 100);
        
        //Console.WriteLine("% Ammo", cooldownInPercent);
        
        if(this.FreezeTimer > 0)
        {
            
            this.FreezeTimer -= event.Dt;
            this.Owner.RigidBody.Velocity = Real3(0,0,0);
            
        }
        
        if(healthInPercent > 100)
        {
            healthInPercent = 100;
        }
        
        if(this.MiniHeathBar)
        {
            var healthBarHUD = this.Space.CreateAtPosition(this.ArchetypeAmmoBar, this.Owner.Transform.Translation + Real3(0, -1.05, 0));
            healthBarHUD.Transform.Scale = Real3(healthInPercent / 35, 0.15, 1);
        }
        //REGEN
        if(this.ConfiguredHealth < this.MaxHealth)
        {
            this.ConfiguredHealth += this.RegenRate * event.Dt;
            if(this.Player)
            {
                var toSend = HealthToUI();
                toSend.Health = this.ConfiguredHealth;
                toSend.MaxHealth = this.MaxHealth;
                this.GameSession.DispatchEvent(Events.HealthToUI, toSend);
            }
            
        }
        
        // DESTROY OWNER IF HEALTH IS LESS THAN OR EQUAL TO ZERO
        if(this.ConfiguredHealth <= 0)
        {
            if(this.Player)
            {
                //Death screen
                var toSend = PlayerDeath();
                this.GameSession.DispatchEvent(Events.PlayerDeath, toSend);
                this.Space.TimeSpace.Paused = true;
            }
            else
            {
                //This is temporary until we decide to make the enemies deaths perminent
                this.Owner.Destroy();
            }
            
            
        }
        
        //Console.WriteLine("HP", this.ConfiguredHealth);
        
    }
    
    
    function Freeze(damage : Real, sprite : SpriteSource, time : Real)
    {
        
        this.FreezeTimer = time;
        this.Owner.Sprite.SpriteSource = sprite;
        this.ConfiguredHealth -= damage;
        
    }
    
    
}
