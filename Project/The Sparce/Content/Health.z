/* ----------------------------------------------------------------------------
** TEAM - We Couldn't Decide
** © 2017 DigiPen Institute of Technology, All Rights Reserved.
**
** Health.z
**
** Author:
** - Hudson Green
**
** Contributors:
** - Brandon Wolenetz
** --------------------------------------------------------------------------*/

class Health : ZilchComponent
{
    
    // CONFIGURABLE HEALTH PROPERTY
    [Property]
    var ConfiguredHealth    : Real = 100.0;
    
    [Property]
    var ArchetypeAmmoBar    : Archetype = Archetype.UI_HealthBar;
    
    [Property]
    var MiniHeathBar        : Boolean = true;
    
    [Property]
    var Player              : Boolean = false;
    
    [Property]
    var Enemy              : Boolean = true;
    
    [Property]
    var HurtColor           : Real4 = Real4(1.0, 0.0, 0.0, 1.0);
    
    [Property]
    var Explosion           : Archetype = Archetype.Particle_WhiteExplosion;
    
    //REGEN
    [Property]
    var RegenRate : Real = 0.5;
    
    [Property]
    var MaxHealth : Real = 100.0;
    
    var FreezeTimer : Real = 0.0;
    
    [Property]
    var HurtDuration : Real = 0.1;
    
    [Property]
    var RegenCooldown : Real = 1;
    
    var RegenTimer : Real = 0;
    
    var HurtTimer : Real = 0.0;
    
    var IsHurt : Boolean = false;
    
    var Regen : Boolean = true;
    
    var PrevHealth : Real = 100;
    
    var HeathPercent : Real
    {
        get
        {
            return this.ConfiguredHealth / this.MaxHealth;
        }
    }
    function Initialize(init : CogInitializer)
    {
        this.MaxHealth = this.ConfiguredHealth;
        
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(this.Owner, Events.Hurt, this.OnHurt);
        
    }

    function OnHurt(event : Hurt)
    {
        this.Space.SoundSpace.PlayCue(SoundCue.Find("PigSFX_HurtPig"));
        
        this.ConfiguredHealth -= event.Damage;
        
        this.Owner.Sprite.Color = this.HurtColor;
        
        this.HurtTimer = this.HurtDuration;
        this.IsHurt = true;
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        this.RegenTimer -= event.Dt;
        if(this.PrevHealth > this.ConfiguredHealth)
        {
            
            this.Regen = false;
            this.RegenTimer = this.RegenCooldown;
            
        }
        this.PrevHealth = this.ConfiguredHealth;
        
        if(this.RegenTimer <= 0)
        {
            this.Regen = true;
        }
        
        if (this.IsHurt)
        {
            if (this.HurtTimer > 0)
            {
                this.HurtTimer -= event.Dt;
            }
            else
            {
                this.Owner.Sprite.Color = Real4(1.0, 1.0, 1.0, 1.0);
                this.IsHurt = false;
            }
        }
        
        var healthDecrease = this.MaxHealth - this.ConfiguredHealth;
        
        var healthInPercent = 100 - (healthDecrease / (this.MaxHealth + 0.001) * 100);
        
        if(this.FreezeTimer > 0)
        {
            
            this.FreezeTimer -= event.Dt;
            this.Owner.RigidBody.Velocity = Real3(0,0,0);
            
        }
        else
        {
            if(this.Player)
                this.Owner.PlayerAnimations.Frozen = false;
            else if (this.Owner.EnemyAnimations != null)
                this.Owner.EnemyAnimations.Frozen = false;
        }
        
        if(healthInPercent > 100)
        {
            healthInPercent = 100;
        }
        
        if(this.MiniHeathBar)
        {
            var healthBarHUD = this.Space.CreateAtPosition(this.ArchetypeAmmoBar, this.Owner.Transform.Translation + Real3(0, -1.05, 0));
            healthBarHUD.Transform.Scale = Real3(healthInPercent / 35, 0.15, 1);
        }
        //REGEN
        if(this.ConfiguredHealth < this.MaxHealth)
        {
            if(this.Regen)
            {
                this.ConfiguredHealth += this.RegenRate * event.Dt;
            }
            if(this.Player)
            {
                var toSend = HealthToUI();
                toSend.Health = this.ConfiguredHealth;
                toSend.MaxHealth = this.MaxHealth;
                this.GameSession.DispatchEvent(Events.HealthToUI, toSend);
            }
            
        }
        
        // DESTROY OWNER IF HEALTH IS LESS THAN OR EQUAL TO ZERO
        if(this.ConfiguredHealth <= 0)
        {
            if(this.Player && !this.LevelSettings.DebugMode.DubugModeEnabled)
            {
                //Death screen
                var toSend = PlayerDeath();
                
                this.GameSession.DispatchEvent(Events.PlayerDeath, toSend);
                this.Space.TimeSpace.Paused = true;
                
            }
            else if(!this.Player)
            {
                this.Space.SoundSpace.PlayCue(SoundCue.Find("PigSFX_KillPig"));
                
                //this is not temporary
                if(this.Enemy)
                {
                    this.LevelSettings.EnemiesKilldstor.EnemiesKilled += 1;
                    var toSend = ScreenShake();
                    toSend.Intencity = 0.1;
                    toSend.Timer = 0.1;
                    toSend.FadeSpeed = 0.1;
                    this.Space.DispatchEvent(Events.ScreenShake, toSend);
                }
                //This is temporary until we decide to make the enemies deaths perminent
                
                //this.Owner.Sprite.SpriteSource = this.Owner.EnemyAnimations.South;
                
                
                this.Owner.Sprite.AnimationActive = false;
                
                this.Owner.Sprite.CurrentFrame = 1;
                
                this.Space.CreateAtPosition(Archetype.Particle_BlackDots, this.Owner.Transform.Translation);
                
                this.Space.CreateAtPosition(this.Explosion, this.Owner.Transform.Translation);
                this.Owner.DispatchEvent(Events.Destroy, Destroy());
                this.Owner.Destroy();
            }
            
            
        }
        
    }
    
    
    function Freeze(damage : Real, time : Real)
    {
        
        this.FreezeTimer = time;
        this.ConfiguredHealth -= damage;
        if(this.Player)
        {
            this.Owner.PlayerAnimations.Frozen = true;
        }
        else
        {
            this.Owner.EnemyAnimations.Frozen = true;
        }
    }
    
    
}
