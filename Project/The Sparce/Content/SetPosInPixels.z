/* ----------------------------------------------------------------------------
** TEAM - We Couldn't Decide
** © 2017 DigiPen Institute of Technology, All Rights Reserved.
**
** SetPosInPixels.z
**
** Author:
** - Hudson Green
**
** Contributors:
** - none
** --------------------------------------------------------------------------*/

class SetPositionInPixels : ZilchComponent
{
    
    [Property]
    var ViewportX   : Real      = 0;
    [Property]
    var ViewportY   : Real      = 0;
    [Property]
    var Alignment   : Integer   = 1;
    [Property]
    var FromTop     : Boolean   = false;
    [Property]
    var FromRight   : Boolean   = false;
    [Property]
    var FromCenter  : Boolean   = false;
    [Property]
    var Enabled     : Boolean   = true;
    
    
    var Offset : Real3
    {
        get
        {
            var half = this.Owner.Transform.Scale / 2;
            half.Z = 0;
            return half;
        }
    }
    
    var Viewport : Real2
    {
        get
        {
            return Real2(this.ViewportX, this.Alignment * this.ViewportY);
        }
    }
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        var viewport = this.LevelSettings.CameraViewport;
        
        if(viewport == null) return;
        
        var screenSize = viewport.ViewportResolution;
        var screenSizeTmp = viewport.ViewportResolution;
        
        if(!this.FromRight)
        {
            screenSize.X = 0;
        }
        
        if(this.FromCenter)
        {
            screenSize.X = screenSizeTmp.X / 2;
        }
        
        if(this.FromTop)
        {
            screenSize.Y = 0;
        }
        
        if(this.Enabled)
        {
            var screen = viewport.ViewportToScreen(this.Viewport + screenSize);
            var world = viewport.ScreenToWorldZPlane(screen, this.Owner.Transform.WorldTranslation.Z);
            
            if(this.FromCenter)
            {
                world = world - Real3(this.Owner.Transform.Scale.X / 2, 0, 0);
            }
            
            this.Owner.Transform.WorldTranslation = world + this.Offset;
        }
    }
    
}
