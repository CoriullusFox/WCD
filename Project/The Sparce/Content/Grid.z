/* ----------------------------------------------------------------------------
** TEAM - We Couldn't Decide
** © 2017 DigiPen Institute of Technology, All Rights Reserved.
**
** FILE NAME
**
** Author:
** - Brandon Wolenetz
**
** Contributors:
** - <list in same format as author if applicable>
** --------------------------------------------------------------------------*/

class Grid : ZilchComponent
{
    
    [Property]
    var GridWorldSize : Real2 = Real2(25,25);
    [Property]
    var Debug : Boolean = false;
    var NodeRadius : Real = 0.5;
    var Grid : Array[Array[Node]];
    
    var NodeDiameter : Real;
    var GridSizeX : Integer;
    var GridSizeY : Integer;
    
    var Once : Boolean = false;
    
    
    function Initialize(init : CogInitializer)
    {
        
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        
        this.NodeDiameter = this.NodeRadius*2;
        this.GridSizeX = Math.Round(this.GridWorldSize.X/this.NodeDiameter) as Integer;
        this.GridSizeY = Math.Round(this.GridWorldSize.Y/this.NodeDiameter) as Integer;
        
    }
    
    var MaxSize : Integer
    {
        get
        {
            return this.GridSizeX * this.GridSizeY;
        }
    }
    
    var BottomL : Real3
    {
        get
        {
            return Real3(0,0,0) - Real3(1,0,0) * (this.GridWorldSize.X/2) - Real3(0,1,0) * this.GridWorldSize.Y/2;
        }
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        if(!this.Once){
            this.CreateGrid();
            this.Once = true;
        }
    }
    function CreateGrid()
    {
        this.Grid = Array[Array[Node]]();
        this.Grid.Resize(this.GridSizeX);
        for(var i = 0; i < this.GridSizeX; ++i)
        {
            
            this.Grid[i] = Array[Node]();
            this.Grid[i].Resize(this.GridSizeY);
            
        }
        var bottomL = this.BottomL;
        
        for (var i = 0; i < this.GridSizeX; ++i)
        {
            
            for (var l = 0; l < this.GridSizeY; ++l)
            {
                var worldPoint = bottomL + Real3(1,0,0) * (i * this.NodeDiameter + this.NodeRadius) + Real3(0,1,0) * (l * this.NodeDiameter + this.NodeRadius);
                var filter = CastFilter();
                filter.IgnoreDynamic = true;
                var walkable : Boolean = this.Space.PhysicsSpace.CastSphereResults(worldPoint + Real3(0,0,0.5), this.NodeRadius-0.3, 1, filter).Empty();
                var closeToWall : Boolean = !this.Space.PhysicsSpace.CastSphereResults(worldPoint + Real3(0,0,0.5), this.NodeDiameter, 1, filter).Empty();
                this.Grid[i][l] = (new Node(walkable, worldPoint, i, l, closeToWall));
                
                if(this.Debug){
                    if(!this.Grid[i][l].Walkable)
                    {
                        this.Space.CreateAtPosition(Archetype.MissingTexture, worldPoint);
                    }
                    else
                    {
                        var box = this.Space.CreateAtPosition(Archetype.MissingTexture, worldPoint);
                        if(box != null)
                        {
                            box.Sprite.Color = Real4(1,1,1,0.2);
                            box.Transform.Scale = Real3(this.NodeRadius*2,this.NodeRadius*2,1);
                            if(this.Grid[i][l].CloseToWall) box.Sprite.Color = Real4(1,1,0,0.2);
                        }
                    }
                }
                
            }
            
            
            
        }
    }
    
    function GetNeighbours(node : Node) : Array[Node]
    {
        
        var neighbours = Array[Node]();
        
        var corners = !node.CloseToWall;
        
        for (var x = -1; x <= 1; ++x)
        {
            for (var y = -1; y <= 1; ++y)
            {
                if(x == 0 && y == 0 || node == null) continue;
                
                if(!corners)
                {
                    
                    if(Math.Abs(x) == Math.Abs(y)) continue;
                    
                }
                
                var checkX = node.GridX + x;
                var checkY = node.GridY + y;
                
                if(checkX >= 0 && checkX < this.GridSizeX && checkY >= 0 && checkY < this.GridSizeY)
                {
                    
                    neighbours.Add(this.Grid[checkX][checkY]);
                    
                }
                
            }
        }
        return neighbours;
    }
    
    function NodeFromWorldPos(pos : Real3) : Node
    {
        var worldOffset = pos - this.BottomL;
        var localPos = Real2(worldOffset.X * this.GridSizeX / this.GridWorldSize.X, worldOffset.Y * this.GridSizeY / this.GridWorldSize.Y);
        var gridPos = Integer2(localPos.X as Integer, localPos.Y as Integer);
        //this.Space.CreateAtPosition(Archetype.MissingTexture_0, this.Grid[gridPos.X][gridPos.Y].WorldPos);
        if(gridPos.X >= this.GridSizeX || gridPos.Y >= this.GridSizeY || gridPos.X < 0 || gridPos.Y < 0)
        {
            return null;
        }
        return this.Grid[gridPos.X][gridPos.Y];
        
        /*
        var percentX = (pos.X + this.GridWorldSize.X/2)/this.GridWorldSize.X;
        var percentY = (pos.Y + this.GridWorldSize.Y/2)/this.GridWorldSize.Y;
        percentX = Math.Clamp(percentX, 0, 1);
        percentY = Math.Clamp(percentY, 0, 1);
        
        var x : Integer = ((this.GridSizeX - 1) * percentX) as Integer;
        var y : Integer = ((this.GridSizeY - 1) * percentY) as Integer;
        return this.Grid[x][y];
        */
    }
}
